@page "/admin/tenants"
@inject ApiClient Api

<SecureRoute>
    <h4>Tenants</h4>

    <EditForm Model="_newTenant" OnValidSubmit="Create">
        <DataAnnotationsValidator />
        <div class="row g-2 mb-3">
            <div class="col-md-4">
                <InputText @bind-Value="_newTenantName" class="form-control" placeholder="Nombre" />
            </div>
            <div class="col-md-4">
                <InputText @bind-Value="_newTenantSub" class="form-control" placeholder="Subdominio" />
            </div>
            <div class="col-md-2 form-check mt-2">
                <InputCheckbox @bind-Value="_newTenantActive" class="form-check-input" />
                <label class="form-check-label">Activo</label>
            </div>
            <div class="col-md-2">
                <button class="btn btn-primary w-100" type="submit">Crear</button>
            </div>
        </div>
    </EditForm>

    @if (_loading)
    {
        <p>Cargando...</p>
    }
    else
    {
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Subdominio</th>
                    <th>Activo</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var t in _data.Items)
            {
                <tr>
                    <td>@t.Id</td>
                    <td>@t.Name</td>
                    <td>@t.Subdomain</td>
                    <td>@t.IsActive</td>
                </tr>
            }
            </tbody>
        </table>
        <div>Total: @_data.TotalCount</div>
    }
</SecureRoute>

@code {
    private PagedResult<TenantDto> _data = new(Array.Empty<TenantDto>(), 1, 10, 0);
    private bool _loading = true;

    private string _newTenantName = "";
    private string _newTenantSub = "";
    private bool _newTenantActive = true;
    private object _newTenant = new(); // dummy para EditForm

    protected override async Task OnInitializedAsync()
    {
        _data = await Api.GetTenants(1, 10, "");
        _loading = false;
    }

    private async Task Create()
    {
        var req = new CreateTenantRequest(_newTenantName, _newTenantSub, _newTenantActive);
        var created = await Api.CreateTenant(req);
        _data = await Api.GetTenants(1, 10, "");
        _newTenantName = "";
        _newTenantSub = "";
        _newTenantActive = true;
        StateHasChanged();
    }
}
